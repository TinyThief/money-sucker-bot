import time

from config.variables import LOSS_LIMIT_COUNT, LOSS_LIMIT_USDT, RISK_RESET_INTERVAL
from log_setup import logger
from utils.telegram_utils import send_telegram_message

# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏ ---
TRADING_DISABLED = False

# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫ ---
TRADE_COUNTER = {
    "count": 0,
}

# --- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ equity –¥–ª—è drawdown —Ä–∞—Å—á—ë—Ç–∞ ---
LAST_EQUITY = {
    "max": 1000.0,
}

# --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∏—Å–∫–∞ ---
RISK_STATE = {
    "loss_count": 0,
    "total_loss": 0.0,
    "last_reset": time.time(),
}

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∏–º–∏—Ç–æ–≤ ---
MAX_DRAWDOWN_PCT = 0.5
MAX_TRADES_PER_SESSION = 5

def get_equity() -> float:
    """–ü—Å–µ–≤–¥–æ-—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ API)."""
    return 1000.0


async def update_risk(pnl: float) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∏—Å–∫–æ–≤. PnL –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º."""
    now = time.time()

    if now - RISK_STATE["last_reset"] > RISK_RESET_INTERVAL:
        logger.info("üîÅ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ —Ä–∏—Å–∫–∞ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É –≤—Ä–µ–º–µ–Ω–∏.")
        RISK_STATE["loss_count"] = 0
        RISK_STATE["total_loss"] = 0.0
        TRADE_COUNTER["count"] = 0
        RISK_STATE["last_reset"] = now

    if pnl < 0:
        RISK_STATE["loss_count"] += 1
        RISK_STATE["total_loss"] += abs(pnl)
    else:
        RISK_STATE["loss_count"] = 0
        RISK_STATE["total_loss"] = max(0.0, RISK_STATE["total_loss"] - pnl)

    TRADE_COUNTER["count"] += 1


async def risk_limits_exceeded() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏ –ª–∏–º–∏—Ç—ã —Ä–∏—Å–∫–∞."""
    global TRADING_DISABLED

    equity = get_equity()
    max_equity = LAST_EQUITY["max"]
    drawdown_pct = (max_equity - equity) / max_equity if max_equity > 0 else 0

    if drawdown_pct >= MAX_DRAWDOWN_PCT:
        logger.warning("‚õî –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏.")
        await safe_send_telegram("‚ö†Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –ª–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏.")
        TRADING_DISABLED = True
        return True

    if TRADE_COUNTER["count"] > MAX_TRADES_PER_SESSION:
        logger.warning("‚õî –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫.")
        await safe_send_telegram("‚ö†Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫.")
        TRADING_DISABLED = True
        return True

    if RISK_STATE["loss_count"] >= LOSS_LIMIT_COUNT:
        logger.warning("‚õî –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–¥—Ä—è–¥ —É–±—ã—Ç–∫–æ–≤.")
        await safe_send_telegram("‚ö†Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –ª–∏–º–∏—Ç –ø–æ–¥—Ä—è–¥ —É–±—ã—Ç–∫–æ–≤.")
        TRADING_DISABLED = True
        return True

    if RISK_STATE["total_loss"] >= LOSS_LIMIT_USDT:
        logger.warning("‚õî –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å—É–º–º–∞—Ä–Ω–æ–≥–æ —É–±—ã—Ç–∫–∞.")
        await safe_send_telegram("‚ö†Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –ª–∏–º–∏—Ç –ø–æ —Å—É–º–º–∞—Ä–Ω–æ–º—É —É–±—ã—Ç–∫—É.")
        TRADING_DISABLED = True
        return True

    return False


async def safe_send_telegram(message: str) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –±–µ–∑ —Ä–∏—Å–∫–∞ –∫—Ä–∞—à–∞."""
    try:
        await send_telegram_message(message)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")