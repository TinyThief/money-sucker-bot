import os
import nest_asyncio
from telegram import BotCommand, Update
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
)

from config.telegram_config import TELEGRAM_CHAT_ID, TELEGRAM_TOKEN
from log_setup import logger
from telegram_bot.commands import (
    cmd_balance,
    cmd_heartbeat,
    cmd_positions,
    cmd_reentry,
    cmd_restart_bot,
    cmd_risk,
    cmd_start_strategies,
    cmd_status,
    cmd_stop_strategies,
    cmd_version,
)
from telegram_bot.commands_optimize import cmd_optimize_confidence
from telegram_bot.debug_commands import (
    debug_memory,
    debug_signals,
    debug_status,
    debug_threads,
    debug_weights,
    cmd_last_signal,
    cmd_equity_plot,
    cmd_drawdown_plot,
    cmd_equity_balance,
    cmd_pnl_summary,
)
from telegram_bot.menu import build_main_menu
from telegram_bot.menu_handler import handle_button

nest_asyncio.apply()

async def start_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message:
        await update.message.reply_text("üìÇ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=build_main_menu())


async def run_telegram_async() -> None:
    if TELEGRAM_TOKEN is None:
        raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    await app.bot.set_my_commands([
        BotCommand("start", "üìÇ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("start_strategies", "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"),
        BotCommand("stop_strategies", "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"),
        BotCommand("status", "üìä –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"),
        BotCommand("positions", "üìà –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"),
        BotCommand("balance", "üí∞ –ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞"),
        BotCommand("restart_bot", "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand("risk", "üõ° –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞"),
        BotCommand("reentry", "üîÅ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—Ö–æ–¥—ã"),
        BotCommand("version", "üì¶ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞"),
        BotCommand("optimize_confidence", "üß† –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è confident –≤–µ—Å–æ–≤"),
        BotCommand("heartbeat", "üõ° –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ (HEARTBEAT)"),
        BotCommand("debug_status", "üß† Debug: —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"),
        BotCommand("debug_threads", "üìö Debug: –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏"),
        BotCommand("debug_memory", "üìÄ Debug: –ø–∞–º—è—Ç—å"),
        BotCommand("debug_weights", "üìä Debug: confident –≤–µ—Å–∞"),
        BotCommand("debug_signals", "üîç Debug: –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã"),
        BotCommand("last_signal", "üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –ø–æ —Å–∏–º–≤–æ–ª—É"),
        BotCommand("equity_plot", "üìà –ì—Ä–∞—Ñ–∏–∫ Equity Curve"),
        BotCommand("drawdown_plot", "üìâ –ì—Ä–∞—Ñ–∏–∫ Drawdown Curve"),
        BotCommand("equity_balance", "üíº –¢–µ–∫—É—â–∏–π equity –±–∞–ª–∞–Ω—Å"),
        BotCommand("pnl_summary", "üìä –°–≤–æ–¥–∫–∞ –ø–æ PnL"),
    ])

    app.add_handler(CommandHandler("start", start_menu))
    app.add_handler(CommandHandler("start_strategies", cmd_start_strategies))
    app.add_handler(CommandHandler("stop_strategies", cmd_stop_strategies))
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CommandHandler("positions", cmd_positions))
    app.add_handler(CommandHandler("balance", cmd_balance))
    app.add_handler(CommandHandler("restart_bot", cmd_restart_bot))
    app.add_handler(CommandHandler("risk", cmd_risk))
    app.add_handler(CommandHandler("reentry", cmd_reentry))
    app.add_handler(CommandHandler("version", cmd_version))
    app.add_handler(CommandHandler("optimize_confidence", cmd_optimize_confidence))
    app.add_handler(CommandHandler("heartbeat", cmd_heartbeat))
    app.add_handler(CommandHandler("debug_status", debug_status))
    app.add_handler(CommandHandler("debug_threads", debug_threads))
    app.add_handler(CommandHandler("debug_memory", debug_memory))
    app.add_handler(CommandHandler("debug_weights", debug_weights))
    app.add_handler(CommandHandler("debug_signals", debug_signals))
    app.add_handler(CommandHandler("last_signal", cmd_last_signal))
    app.add_handler(CommandHandler("equity_plot", cmd_equity_plot))
    app.add_handler(CommandHandler("drawdown_plot", cmd_drawdown_plot))
    app.add_handler(CommandHandler("equity_balance", cmd_equity_balance))
    app.add_handler(CommandHandler("pnl_summary", cmd_pnl_summary))
    app.add_handler(CallbackQueryHandler(handle_button))

    logger.info("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    try:
        if TELEGRAM_CHAT_ID:
            await app.bot.send_message(
                chat_id=TELEGRAM_CHAT_ID,
                text="–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
            )
        else:
            logger.warning("‚ö†Ô∏è TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω. –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.warning(f"[Telegram] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    app.run_polling()


async def start_telegram() -> None:
    try:
        await run_telegram_async()
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Telegram-–±–æ—Ç–∞:")


if __name__ == "__main__":
    import asyncio
    asyncio.run(start_telegram())