import asyncio
from collections.abc import Callable
from typing import Any

import ccxt

from trade_executor_core import reconnect_exchange
from log_setup import logger


async def safe_execute(
    fn: Callable[..., Any],
    *args: Any,
    **kwargs: Any,
) -> Any | None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º."""
    try:
        if asyncio.iscoroutinefunction(fn):
            return await fn(*args, **kwargs)
        return fn(*args, **kwargs)

    except (ccxt.NetworkError, ccxt.ExchangeNotAvailable, ccxt.RequestTimeout) as e:
        logger.warning("üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –≤ %s: %s. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...", fn.__name__, str(e))
        await reconnect_exchange()  # <-- –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω await
        await asyncio.sleep(2)

        try:
            if asyncio.iscoroutinefunction(fn):
                return await fn(*args, **kwargs)
            return fn(*args, **kwargs)
        except (ccxt.BaseError, RuntimeError) as e2:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ %s: %s", fn.__name__, str(e2))
            return None

    except (ValueError, RuntimeError) as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ safe_execute (%s): %s", fn.__name__, str(e))
        return None
