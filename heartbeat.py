import time

from telegram import Update
from telegram.ext import ContextTypes

from api.bybit_async import fetch_balance, get_open_positions
from core.state import strategy_stop_event

BOT_START_TIME = time.time()

# üõ° Heartbeat - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
async def cmd_heartbeat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        balance = await fetch_balance()
        if balance is None:
            if update.message:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å.")
            return
        usdt, free, used = balance
        positions = await get_open_positions()

        total_pnl = sum(p["pnl"] for p in positions) if positions else 0
        uptime_seconds = int(time.time() - BOT_START_TIME)
        uptime_minutes = uptime_seconds // 60
        uptime_hours = uptime_minutes // 60
        uptime_formatted = f"{uptime_hours}—á {uptime_minutes % 60}–º"

        strategy_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã" if not strategy_stop_event.is_set() else "‚õî –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

        message = (
            "üõ° <b>HEARTBEAT-–û–¢–ß–Å–¢:</b>\n\n"
            f"‚Ä¢ üí∞ –ë–∞–ª–∞–Ω—Å: <b>{usdt:.2f} USDT</b>\n"
            f"‚Ä¢ üìâ –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏: <b>{len(positions) if positions else 0}</b>\n"
            f"‚Ä¢ üìà –û–±—â–∏–π PnL: <b>{total_pnl:+.2f} USDT</b>\n"
            f"‚Ä¢ üß† –°—Ç—Ä–∞—Ç–µ–≥–∏–∏: <b>{strategy_status}</b>\n"
            f"‚Ä¢ ‚è∞ –ê–ø—Ç–∞–π–º: <b>{uptime_formatted}</b>\n"
            "‚Ä¢ ‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
        )

        if update.message:
            await update.message.reply_text(message, parse_mode="HTML")

    except Exception:
        if update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ heartbeat —Å—Ç–∞—Ç—É—Å–∞.")
