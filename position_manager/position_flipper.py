import asyncio

from trade_executor_core import close_position, get_open_position
from config.settings import AUTO_TRADE
from log_setup import logger
from trade_executor_core import place_order
from utils.safe_tools import safe_execute
from utils.telegram_utils import send_telegram_message


def flip_position(
    symbol: str,
    new_side: str,
    size: float,
    sl: float,
    tp: float,
    tp1: float | None = None,
    tp2: float | None = None,
    tp1_ratio: float = 0.5,
) -> bool:
    """–ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ —Å–∏–º–≤–æ–ª—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TP1/TP2."""
    async def _execute():
        current = await safe_execute(get_open_position, symbol=symbol)
        if not current or current.get("size", 0) == 0:
            logger.info("üü¢ –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø–æ %s ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º %s", symbol, new_side.upper())
            await _notify(f"üìà <b>{symbol}</b>: –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {new_side.upper()} –±–µ–∑ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞.")
            return await _open(symbol, new_side, size, sl, tp1, tp2, tp1_ratio)

        current_side = current.get("side", "").lower()
        if (current_side == "long" and new_side == "buy") or (current_side == "short" and new_side == "sell"):
            logger.info("‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –ø–æ %s —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ %s. –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –Ω–µ –Ω—É–∂–µ–Ω.", symbol, current_side.upper())
            return False

        logger.info("üîÅ –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç: %s ‚Äî –∑–∞–∫—Ä—ã—Ç–∏–µ %s, –æ—Ç–∫—Ä—ã—Ç–∏–µ %s", symbol, current_side.upper(), new_side.upper())
        await _notify(f"üîÅ <b>{symbol}</b>: –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç –ø–æ–∑–∏—Ü–∏–∏ ‚Äî {current_side.upper()} ‚ûú {new_side.upper()}")

        closed = await safe_execute(close_position, symbol=symbol)
        if not closed:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ %s. –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –æ—Ç–º–µ–Ω—ë–Ω.", symbol)
            return False

        return await _open(symbol, new_side, size, sl, tp1, tp2, tp1_ratio)

    return asyncio.run(_execute())


async def _open(
    symbol: str,
    side: str,
    size: float,
    sl: float,
    tp1: float | None = None,
    tp2: float | None = None,
    tp1_ratio: float = 0.5,
) -> bool:
    if not AUTO_TRADE:
        logger.info("üü° DRY-RUN: –ø–æ–∑–∏—Ü–∏—è %s –ø–æ %s, –æ–±—ä—ë–º %.2f", side.upper(), symbol, size)
        return True

    result = await safe_execute(place_order, symbol, side, size, sl, tp2, tp1, tp1_ratio)
    if result:
        logger.info("‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è %s –ø–æ %s, –æ–±—ä—ë–º %.2f", side.upper(), symbol, size)
        return True

    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é %s –ø–æ %s", side.upper(), symbol)
    return False


async def _notify(text: str) -> None:
    if AUTO_TRADE:
        await send_telegram_message(text)
