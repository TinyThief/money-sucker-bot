import json
import os
import threading
import psutil
import pandas as pd
import matplotlib.pyplot as plt

from collections import defaultdict
from telegram import Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from core import state
from utils.confidence_weights import CONFIDENCE_WEIGHTS as default_weights

SIGNAL_LOG_PATH = "logs/signal_log.csv"
DEBUG_LOG_PATH = "logs/signal_debug.log"
EQUITY_CSV_PATH = "data/equity_curve.csv"
BACKTESTS_DIR = "backtests"

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
async def safe_reply(update: Update, text: str, **kwargs):
    if update.message:
        await update.message.reply_text(text, **kwargs)

async def safe_reply_photo(update: Update, photo: InputFile, caption: str = ""):
    if update.message:
        await update.message.reply_photo(photo=photo, caption=caption)

# /debug status
async def debug_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await safe_reply(update,
        f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: {state.is_running}\n"
        f"üßµ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ—Ç–æ–∫: {'‚úÖ' if state.strategy_thread and state.strategy_thread.is_alive() else '‚ùå'}\n"
        f"üõë Stop Event: {state.strategy_stop_event.is_set()}"
    )

# /debug threads
async def debug_threads(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    threads = threading.enumerate()
    msg = "\n".join([f"‚Ä¢ {t.name}" for t in threads])
    await safe_reply(update, f"üßµ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏:\n{msg}")

# /debug memory
async def debug_memory(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    process = psutil.Process(os.getpid())
    mem_mb = process.memory_info().rss / 1024 / 1024
    await safe_reply(update, f"üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–∞–º—è—Ç—å: {mem_mb:.2f} MB")

# /debug weights
async def debug_weights(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    formatted = json.dumps(default_weights, indent=2)
    await safe_reply(update, f"üìä –¢–µ–∫—É—â–∏–µ –≤–µ—Å–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:\n<pre>{formatted}</pre>", parse_mode="HTML")

# /debug signals
async def debug_signals(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        with open(SIGNAL_LOG_PATH, encoding="utf-8") as f:
            lines = f.readlines()[-5:]
        msg = "\n".join(lines)
        await safe_reply(update, f"ü™µ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã:\n<pre>{msg}</pre>", parse_mode="HTML")
    except Exception as e:
        await safe_reply(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

# /last_signal SYMBOL
async def cmd_last_signal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await safe_reply(update, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª, –ø—Ä–∏–º–µ—Ä: /last_signal BTC/USDT")
        return

    symbol = context.args[0].upper()

    if not os.path.exists(DEBUG_LOG_PATH):
        await safe_reply(update, "‚ùå –õ–æ–≥ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        with open(DEBUG_LOG_PATH, "r", encoding="utf-8") as f:
            lines = f.readlines()

        for line in reversed(lines):
            if symbol in line:
                await safe_reply(update, f"üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –ø–æ {symbol}:\n<code>{line.strip()}</code>", parse_mode="HTML")
                return

        await safe_reply(update, f"‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ {symbol} –≤ –ª–æ–≥–µ.")
    except Exception as e:
        await safe_reply(update, f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}")

# /equity_plot
async def cmd_equity_plot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not os.path.exists(EQUITY_CSV_PATH):
        await safe_reply(update, "‚ùå –§–∞–π–ª equity_curve.csv –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    try:
        df = pd.read_csv(EQUITY_CSV_PATH)
        if df.empty or 'equity' not in df.columns:
            await safe_reply(update, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç equity-—Ñ–∞–π–ª–∞.")
            return

        plt.figure(figsize=(10, 5))
        plt.plot(df['equity'], label='Equity')
        plt.title('Equity Curve')
        plt.xlabel('Trade #')
        plt.ylabel('Equity')
        plt.grid(True)
        plt.legend()

        plot_path = "logs/equity_plot.png"
        plt.savefig(plot_path)
        plt.close()

        with open(plot_path, "rb") as img:
            if update.message:
                await update.message.reply_photo(InputFile(img), caption="üìà Equity Curve")
    except Exception as e:
        await safe_reply(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

# /drawdown_plot
async def cmd_drawdown_plot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not os.path.exists(EQUITY_CSV_PATH):
        await safe_reply(update, "‚ùå –§–∞–π–ª equity_curve.csv –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    try:
        df = pd.read_csv(EQUITY_CSV_PATH)
        if df.empty or 'equity' not in df.columns:
            await safe_reply(update, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç equity-—Ñ–∞–π–ª–∞.")
            return

        equity = df['equity']
        rolling_max = equity.cummax()
        drawdown = (equity - rolling_max) / rolling_max

        plt.figure(figsize=(10, 5))
        plt.plot(drawdown, label='Drawdown', color='red')
        plt.title('Drawdown Curve')
        plt.xlabel('Trade #')
        plt.ylabel('Drawdown (fraction)')
        plt.grid(True)
        plt.legend()

        plot_path = "logs/drawdown_plot.png"
        plt.savefig(plot_path)
        plt.close()

        with open(plot_path, "rb") as img:
            if update.message:
                await update.message.reply_photo(InputFile(img), caption="üìâ Drawdown Curve")
    except Exception as e:
        await safe_reply(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ drawdown-–≥—Ä–∞—Ñ–∏–∫–∞: {e}")

# /equity_balance
async def cmd_equity_balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not os.path.exists(EQUITY_CSV_PATH):
        await safe_reply(update, "‚ùå –§–∞–π–ª equity_curve.csv –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    try:
        df = pd.read_csv(EQUITY_CSV_PATH)
        if df.empty or 'equity' not in df.columns:
            await safe_reply(update, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç equity-—Ñ–∞–π–ª–∞.")
            return

        current_equity = df['equity'].iloc[-1]
        await safe_reply(update, f"üíº –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å equity: {current_equity:.2f} USDT")
    except Exception as e:
        await safe_reply(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ equity: {e}")

# /pnl_summary
async def cmd_pnl_summary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not os.path.exists(SIGNAL_LOG_PATH):
        await safe_reply(update, "‚ùå –õ–æ–≥ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    try:
        df = pd.read_csv(SIGNAL_LOG_PATH, header=None)
        df.columns = [
            "timestamp", "symbol", "direction", "entry_price", "sl_price", "tp_price",
            "size", "confidence", "reasons", "status", "result", "pnl"
        ]

        trades = df.dropna(subset=["pnl"])
        total_trades = len(trades)
        total_pnl = trades["pnl"].sum()
        win_rate = (trades["pnl"] > 0).mean() * 100
        avg_rr = trades.apply(lambda row: abs((row["tp_price"] - row["entry_price"]) / (row["entry_price"] - row["sl_price"])) if row["entry_price"] != row["sl_price"] else 0, axis=1).mean()

        msg = (
            f"üìä –°–≤–æ–¥–∫–∞ PnL:\n"
            f"‚Ä¢ –°–¥–µ–ª–æ–∫: {total_trades}\n"
            f"‚Ä¢ –û–±—â–∏–π PnL: {total_pnl:.2f} USDT\n"
            f"‚Ä¢ Winrate: {win_rate:.1f}%\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π Risk/Reward: {avg_rr:.2f}"
        )
        await safe_reply(update, msg)
    except Exception as e:
        await safe_reply(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PnL: {e}")

# /summary_plot
async def cmd_summary_plot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        df = pd.read_csv(SIGNAL_LOG_PATH, header=None)
        df.columns = [
            "timestamp", "symbol", "direction", "entry_price", "sl_price", "tp_price",
            "size", "confidence", "reasons", "status", "result", "pnl"
        ]
        df['pnl'].hist(bins=50)
        plt.title("PNL Histogram")
        plt.grid(True)
        plt.savefig("logs/pnl_histogram.png")
        plt.close()

        with open("logs/pnl_histogram.png", "rb") as img:
            if update.message:
                await update.message.reply_photo(InputFile(img), caption="üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ PnL")
    except Exception as e:
        await safe_reply(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

# /cmd_optimize_confidence
async def cmd_optimize_confidence_auto(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not os.path.exists(SIGNAL_LOG_PATH):
        await safe_reply(update, "‚ùå –õ–æ–≥ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        df = pd.read_csv(SIGNAL_LOG_PATH, header=None)
        df.columns = [
            "timestamp", "symbol", "direction", "entry_price", "sl_price", "tp_price",
            "size", "confidence", "reasons", "status", "result", "pnl"
        ]

        counts = defaultdict(lambda: {"tp": 0, "sl": 0})
        for _, row in df.iterrows():
            if row["result"] not in ["tp", "sl"]:
                continue
            reason_list = str(row["reasons"]).split("; ")
            for reason in reason_list:
                if row["result"] == "tp":
                    counts[reason]["tp"] += 1
                else:
                    counts[reason]["sl"] += 1

        weights = {}
        for reason, stats in counts.items():
            total = stats["tp"] + stats["sl"]
            score = 50 if total == 0 else int(stats["tp"] / total * 100)
            weights[reason] = score

        os.makedirs("config", exist_ok=True)
        with open("config/confidence_weights.json", "w", encoding="utf-8") as f:
            json.dump(weights, f, indent=4)

        await safe_reply(update, "üß† –í–µ—Å–∞ confident —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ config/confidence_weights.json")
    except Exception as e:
        await safe_reply(update, f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ confident-–≤–µ—Å–æ–≤: {e}")

# /load_weights
async def cmd_load_weights(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if not os.path.exists(BACKTESTS_DIR):
            await safe_reply(update, "üìÇ –ü–∞–ø–∫–∞ backtests –ø—É—Å—Ç–∞.")
            return

        folders = sorted(os.listdir(BACKTESTS_DIR), reverse=True)
        if not folders:
            await safe_reply(update, "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤–µ—Å–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
            return

        keyboard = [
            [InlineKeyboardButton(f"üì• {folder}", callback_data=f"load_weights:{folder}")]
            for folder in folders[:5]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        await safe_reply(update, "üîÑ –í—ã–±–µ—Ä–∏ –≤–µ—Ä—Å–∏—é –≤–µ—Å–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:", reply_markup=markup)

    except Exception as e:
        await safe_reply(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–µ—Å–æ–≤: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
async def handle_button_load_weights(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if not query or not query.data or not query.data.startswith("load_weights:"):
        return

    await query.answer()
    try:
        folder = query.data.split(":", 1)[1]
        weights_path = os.path.join(BACKTESTS_DIR, folder, "best_weights.json")
        if not os.path.exists(weights_path):
            await query.edit_message_text(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {weights_path}")
            return

        with open(weights_path, "r", encoding="utf-8") as f:
            data = json.load(f)
            weights = data.get("weights", {})

        os.makedirs("config", exist_ok=True)
        with open("config/confidence_weights.json", "w", encoding="utf-8") as f:
            json.dump(weights, f, indent=4)

        await query.edit_message_text(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≤–µ—Å–∞ –∏–∑ {folder} –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–µ.")
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –≤–µ—Å–æ–≤: {e}")
