import json
from collections import defaultdict
import pandas as pd

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
LOG_FILE = "logs/signal_log.csv"
WEIGHTS_FILE = "config/best_weights.json"
OUTPUT_FILE = "config/best_weights_optimized.json"

# ‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∏–º –ª–æ–≥–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
def load_logs():
    try:
        return pd.read_csv(LOG_FILE)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        return pd.DataFrame()

# üìä –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞
def analyze_weights(df):
    stats = defaultdict(lambda: {"tp": 0, "sl": 0, "count": 0})

    for _, row in df.iterrows():
        if pd.isna(row.get("reasons")) or pd.isna(row.get("result")):
            continue

        try:
            reasons = json.loads(row["reasons"]) if isinstance(row["reasons"], str) else row["reasons"]
            result = row["result"].lower().strip()
            for reason in reasons:
                key = reason.replace("‚úÖ", "").replace("üìç", "").replace(":", "").strip()
                stats[key]["count"] += 1
                if result == "tp":
                    stats[key]["tp"] += 1
                elif result == "sl":
                    stats[key]["sl"] += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏: {e}")
            continue

    return stats

# üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –≤–µ—Å–æ–≤ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
def generate_weights(stats, base_weight=10, scale=40):
    new_weights = {}
    for key, values in stats.items():
        total = values["count"]
        if total == 0:
            continue
        success_ratio = values["tp"] / total
        weight = base_weight + round((success_ratio - 0.5) * scale)
        weight = max(0, weight)  # –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å < 0
        new_weights[key] = weight
    return new_weights

# üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤–µ—Å–æ–≤
def save_weights(weights) -> None:
    try:
        with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
            json.dump(weights, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –≤–µ—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {OUTPUT_FILE}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
def optimize() -> None:
    df = load_logs()
    if df.empty:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return
    stats = analyze_weights(df)
    new_weights = generate_weights(stats)
    save_weights(new_weights)

# üß† –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
def optimize_weights_from_logs(log_path="logs/signal_log.csv"):
    df = pd.read_csv(log_path)
    stats = analyze_weights(df)
    return generate_weights(stats)

if __name__ == "__main__":
    optimize()
