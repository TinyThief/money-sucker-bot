import os
import sys

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..")))
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from utils.confidence_optimizer import optimize_confidence_weights
from utils.telegram_utils import send_telegram_message


async def cmd_optimize_confidence(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if update.message:
            await update.message.reply_text("üß† –ù–∞—á–∏–Ω–∞—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é confidence-–≤–µ—Å–æ–≤...")

        result = optimize_confidence_weights()

        if isinstance(result, dict):
            message = (
                "‚úÖ <b>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"
                f"‚Ä¢ –õ—É—á—à–∏–µ –≤–µ—Å–∞: <code>{result.get('best_weights')}</code>\n"
                f"‚Ä¢ Winrate: <b>{result.get('winrate')}%</b>\n"
                f"‚Ä¢ –¢–µ—Å—Ç–æ–≤: {result.get('tests_run')}\n"
            )

            if update.message:
                await update.message.reply_text(message, parse_mode=ParseMode.HTML)

            await send_telegram_message("üß† Confidence –≤–µ—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        else:
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}"
        if update.message:
            await update.message.reply_text(error_msg)
        await send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –≤ /optimize_confidence: {e}")
