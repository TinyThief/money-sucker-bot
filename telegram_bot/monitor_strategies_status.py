import asyncio

from core.state import strategy_stop_event
from event_driven_heartbeat import last_known_status, send_event_heartbeat  # ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Event-Driven Heartbeat
from log_setup import logger
from strategies.smc_strategy import run_smc_strategy
from utils.load_tickers import load_tickers
from utils.telegram_utils import send_telegram_message
from config import settings  # ‚¨ÖÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

alert_sent: bool = False

async def monitor_strategies_status() -> None:
    global alert_sent

    while True:
        try:
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è Heartbeat
            current_strategies_running = not strategy_stop_event.is_set()

            if "strategies_running" not in last_known_status or not isinstance(last_known_status["strategies_running"], bool):
                last_known_status["strategies_running"] = current_strategies_running

            if current_strategies_running != last_known_status["strategies_running"]:
                status_text = "‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞–ø—É—â–µ–Ω—ã" if current_strategies_running else "‚õî –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
                await send_event_heartbeat(status_text)
                last_known_status["strategies_running"] = current_strategies_running

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–¥–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            if strategy_stop_event.is_set():
                if not alert_sent:
                    logger.warning("üö® –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram.")
                    await send_telegram_message("üö® –í–ù–ò–ú–ê–ù–ò–ï: –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å! –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
                    alert_sent = True

                    await asyncio.sleep(30)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º

                    logger.info("‚ôªÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
                    await restart_strategies()
            else:
                alert_sent = False  # –ï—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ monitor_strategies_status: {e}")

async def restart_strategies() -> None:
    try:
        tickers = await load_tickers()

        for symbol in tickers:
            asyncio.create_task(run_smc_strategy(
                symbol=symbol,
                capital=1000,
                default_risk_pct=settings.DEFAULT_RISK_PCT,
            ))

        await send_telegram_message("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!")

        # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        strategy_stop_event.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
        await send_telegram_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.")
