import json
import os
from concurrent.futures import ThreadPoolExecutor, as_completed

import pandas as pd

from backtest.smc_dry_backtest import backtest_smc_dry

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä
with open("config/pairs.json", encoding="utf-8") as f:
    pairs = json.load(f)["pairs"]

results = []

print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ backtest...")

def run(symbol):
    try:
        df = backtest_smc_dry(symbol, capital=1000)
        if df is not None:
            profit = df["pnl"].sum()
            winrate = (df["result"] == "tp").mean()
            return {
                "symbol": symbol,
                "trades": len(df),
                "profit": round(profit, 2),
                "winrate": round(winrate * 100, 2),
            }
    except Exception as e:
        return {"symbol": symbol, "error": str(e)}

    return {"symbol": symbol, "trades": 0}

with ThreadPoolExecutor(max_workers=min(8, len(pairs))) as executor:
    futures = {executor.submit(run, symbol): symbol for symbol in pairs}

    for fut in as_completed(futures):
        result = fut.result()
        results.append(result)
        if "error" in result:
            print(f"‚ùå {result['symbol']}: {result['error']}")
        else:
            print(f"‚úÖ {result['symbol']}: {result['trades']} —Å–¥–µ–ª–æ–∫ | –ü—Ä–∏–±—ã–ª—å: {result['profit']} | Winrate: {result['winrate']}%")

# –°–≤–æ–¥–∫–∞
total_profit = sum(r.get("profit", 0) for r in results if "error" not in r)
total_trades = sum(r.get("trades", 0) for r in results if "error" not in r)

print("\nüìä –û–±—â–∏–π –∏—Ç–æ–≥:")
print(f"‚Ä¢ –í—Å–µ–≥–æ –ø–∞—Ä: {len(pairs)}")
print(f"‚Ä¢ –°–¥–µ–ª–æ–∫: {total_trades}")
print(f"‚Ä¢ –°—É–º–º–∞—Ä–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {round(total_profit, 2)} USDT")

# ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞ –≤ CSV
report_df = pd.DataFrame(results)
report_path = "logs/backtest_summary.csv"
os.makedirs("logs", exist_ok=True)
report_df.to_csv(report_path, index=False, encoding="utf-8")
print(f"\nüìÅ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
