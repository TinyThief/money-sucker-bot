import time
import os
from typing import List, Dict, Any

from telegram import Update
from telegram.ext import ContextTypes

from api.bybit_async import fetch_balance as get_balance, get_open_positions
from core.state import strategy_stop_event
from utils.equity_plot import plot_equity_curve

BOT_START_TIME = time.time()

# ‚ñ∂Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
async def cmd_start_strategies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not strategy_stop_event.is_set():
        if update.message:
            await update.message.reply_text("‚ñ∂Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç.")
        return
    strategy_stop_event.clear()
    if update.message:
        await update.message.reply_text("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞–ø—É—â–µ–Ω—ã.")

async def cmd_stop_strategies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if strategy_stop_event.is_set():
        if update.message:
            await update.message.reply_text("‚õî –£–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        return
    strategy_stop_event.set()
    if update.message:
        await update.message.reply_text("‚èπ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    status = "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã (–µ–∂–µ—á–∞—Å–Ω–æ)" if not strategy_stop_event.is_set() else "‚õî –ù–µ –∑–∞–ø—É—â–µ–Ω—ã"
    if update.message:
        await update.message.reply_text(f"üìä –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {status}")

# üí∞ –ë–∞–ª–∞–Ω—Å –∏ –ø–æ–∑–∏—Ü–∏–∏
async def cmd_balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    balance = await get_balance()
    usdt, free, used = balance if balance else (0.0, 0.0, 0.0)
    if update.message:
        await update.message.reply_text(
            f"üí∞ –ë–∞–ª–∞–Ω—Å:\n‚Ä¢ Total: {usdt:.2f} USDT\n‚Ä¢ Free: {free:.2f} USDT\n‚Ä¢ Used: {used:.2f} USDT"
        )

async def cmd_positions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    positions = await get_open_positions() or []
    if update.message:
        if not positions:
            await update.message.reply_text("üìâ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç.")
            return
        lines = [
            f"‚Ä¢ {p['symbol']}: {p['side']} {p['size']} @ {p['entry']} | PnL: {p.get('pnl', 0.0):.2f}"
            for p in positions
        ]
        await update.message.reply_text("üìâ –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n" + "\n".join(lines))

async def cmd_pnl(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    positions = await get_open_positions() or []
    if update.message:
        if not positions:
            await update.message.reply_text("üìâ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç.")
            return
        total_pnl = sum(p.get("pnl", 0.0) for p in positions)
        lines = [f"‚Ä¢ {p['symbol']}: {p.get('pnl', 0.0):+.2f}" for p in positions]
        emoji = "üü¢" if total_pnl >= 0 else "üî¥"
        text = "üíπ –¢–µ–∫—É—â–∏–π PnL:\n" + "\n".join(lines) + f"\nüîΩ –û–±—â–∏–π PnL: {total_pnl:+.2f} USDT {emoji}"
        await update.message.reply_text(text)

# üîß –°–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def cmd_logs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message:
        await update.message.reply_text("ü™µ –õ–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø–∞–ø–∫–µ /logs")

async def cmd_restart_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message:
        await update.message.reply_text("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞... (–∑–∞–≥–ª—É—à–∫–∞)")

async def cmd_risk(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message:
        await update.message.reply_text("üõ° –†–∏—Å–∫: 1%\nRR: 2.5")

async def cmd_reentry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message:
        await update.message.reply_text("üîÅ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")

async def cmd_version(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message:
        await update.message.reply_text("üì¶ –í–µ—Ä—Å–∏—è: v3.2")

# üìà Equity –≥—Ä–∞—Ñ–∏–∫
async def cmd_equity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    path = plot_equity_curve()
    if update.message:
        if path:
            chat_id = update.effective_chat.id if update.effective_chat else None
            if chat_id:
                with open(path, "rb") as img:
                    await context.bot.send_photo(chat_id=chat_id, photo=img, caption="üìà Equity Curve")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å equity curve.")

# ‚ù§Ô∏è Heartbeat
async def cmd_heartbeat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        balance = await get_balance()
        usdt, _, _ = balance if balance else (0.0, 0.0, 0.0)
        positions = await get_open_positions() or []
        total_pnl = sum(p.get("pnl", 0.0) for p in positions)

        uptime_seconds = int(time.time() - BOT_START_TIME)
        uptime_minutes = uptime_seconds // 60
        uptime_hours = uptime_minutes // 60
        uptime_formatted = f"{uptime_hours}—á {uptime_minutes % 60}–º"
        strategy_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã" if not strategy_stop_event.is_set() else "‚õî –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

        message = (
            "üõ° <b>HEARTBEAT-–û–¢–ß–Å–¢:</b>\n\n"
            f"‚Ä¢ üí∞ –ë–∞–ª–∞–Ω—Å: <b>{usdt:.2f} USDT</b>\n"
            f"‚Ä¢ üìâ –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏: <b>{len(positions)}</b>\n"
            f"‚Ä¢ üìà –û–±—â–∏–π PnL: <b>{total_pnl:+.2f} USDT</b>\n"
            f"‚Ä¢ üß† –°—Ç—Ä–∞—Ç–µ–≥–∏–∏: <b>{strategy_status}</b>\n"
            f"‚Ä¢ ‚è∞ –ê–ø—Ç–∞–π–º: <b>{uptime_formatted}</b>\n"
            "‚Ä¢ ‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
        )

        if update.message:
            await update.message.reply_text(message, parse_mode="HTML")

    except Exception as e:
        if update.message:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ heartbeat –∫–æ–º–∞–Ω–¥—ã.\n{e}")

# ‚õî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ pause.flag / halt.flag
async def cmd_pause_trading(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    open("pause.flag", "w").close()
    if update.message:
        await update.message.reply_text("‚è∏ –¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (pause.flag –∞–∫—Ç–∏–≤–µ–Ω).")

async def cmd_resume_trading(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if os.path.exists("pause.flag"):
        os.remove("pause.flag")
    if update.message:
        await update.message.reply_text("‚ñ∂Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ (pause.flag —É–¥–∞–ª—ë–Ω).")

async def cmd_halt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    open("halt.flag", "w").close()
    if update.message:
        await update.message.reply_text("üõë –¢–æ—Ä–≥–æ–≤–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (halt.flag –∞–∫—Ç–∏–≤–µ–Ω).")

async def cmd_unhalt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if os.path.exists("halt.flag"):
        os.remove("halt.flag")
    if update.message:
        await update.message.reply_text("‚ôªÔ∏è Halt —Å–Ω—è—Ç. –¢–æ—Ä–≥–æ–≤–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞.")

# üìò –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def cmd_strategies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message:
        await update.message.reply_text("üìò –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n- SMC (—Ç–∞–π–º—Ñ—Ä–µ–π–º: 1H)")

async def cmd_scanning(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message:
        await update.message.reply_text("üîç –°–µ–π—á–∞—Å –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ø–∞—Ä—ã: BTC/USDT, ETH/USDT")
async def cmd_signals(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message:
        await update.message.reply_text("üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã:\n- BTC/USDT: BUY\n- ETH/USDT: SELL")