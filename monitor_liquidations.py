import asyncio
import json
import time
from collections import deque

import websockets

from api.bybit_async import set_leverage
from log_setup import logger
from utils.telegram_utils import send_telegram_message

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
LIQUIDATION_THRESHOLD_USDT = 50000
BYBIT_WSS_URL = "wss://stream.bybit.com/v5/public/linear"

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
liquidation_counter = 0
current_risk_pct = 0.01
current_rr = 2.0
monitoring_only_mode = False
emergency_active = False

recent_liquidations = deque(maxlen=100)

HIGH_VOLATILITY_THRESHOLD = 0.015
LOW_VOLATILITY_THRESHOLD = 0.007

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
async def monitor_liquidations() -> None:
    global liquidation_counter, current_risk_pct, current_rr, monitoring_only_mode

    while True:
        try:
            async with websockets.connect(BYBIT_WSS_URL) as ws:
                logger.info("üß© WebSocket –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π Bybit –ø–æ–¥–∫–ª—é—á—ë–Ω.")

                subscribe_message = {
                    "op": "subscribe",
                    "args": ["liquidation.*"],
                }
                await ws.send(json.dumps(subscribe_message))

                async for message in ws:
                    await handle_liquidation_message(message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ WebSocket –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π: {e}")
            await asyncio.sleep(10)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
async def handle_liquidation_message(message) -> None:
    global liquidation_counter

    try:
        data = json.loads(message)
        if "data" in data:
            for item in data["data"]:
                size = float(item.get("qty", 0))
                price = float(item.get("price", 0))
                side = item.get("side", "Unknown")
                symbol = item.get("symbol", "Unknown")

                liquidation_value = size * price

                if liquidation_value >= LIQUIDATION_THRESHOLD_USDT:
                    msg = (
                        f"üí• –ö—Ä—É–ø–Ω–∞—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è –Ω–∞ {symbol}!\n"
                        f"‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {side}\n"
                        f"‚Ä¢ –†–∞–∑–º–µ—Ä –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: {liquidation_value:.2f} USDT\n"
                        f"‚Ä¢ –¶–µ–Ω–∞: {price:.2f} USDT"
                    )
                    logger.warning(msg)
                    await send_telegram_message(msg)

                    recent_liquidations.append({
                        "symbol": symbol,
                        "side": side,
                        "price": price,
                        "qty": size,
                        "value": liquidation_value,
                        "timestamp": time.time(),
                    })

                    liquidation_counter += 1
                    await check_and_update_risk()
                    await check_emergency_conditions()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: {e}")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–∏—Å–∫–∞
async def check_and_update_risk() -> None:
    global liquidation_counter, current_risk_pct, current_rr, monitoring_only_mode

    if liquidation_counter >= 20:
        current_risk_pct = 0.003
        current_rr = 1.2
        monitoring_only_mode = True
        liquidation_counter = 0
        await send_telegram_message("üö® –°–∏–ª—å–Ω–µ–π—à–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å! –ü–µ—Ä–µ—Ö–æ–¥ –≤ Monitoring-Only Mode!")

    elif liquidation_counter < 3:
        current_risk_pct = 0.015
        current_rr = 3.0
        monitoring_only_mode = False
        liquidation_counter = 0
        await send_telegram_message("üåô –†—ã–Ω–æ–∫ —Å—Ç–∞–±–∏–ª–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º.")

    else:
        current_risk_pct = 0.01
        current_rr = 2.0
        monitoring_only_mode = False

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è Emergency Stop
async def check_emergency_conditions() -> None:
    if count_recent_liquidations(300, 500000) >= 5:
        await activate_emergency_stop(reason="–ú–∞—Å—Å–æ–≤—ã–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –∑–∞ 5 –º–∏–Ω—É—Ç")

def count_recent_liquidations(time_window_sec: int, min_value_usdt: float) -> int:
    now = time.time()
    return sum(1 for liq in recent_liquidations if now - liq.get("timestamp", 0) <= time_window_sec and liq.get("value", 0) >= min_value_usdt)

async def activate_emergency_stop(reason: str) -> None:
    global emergency_active
    if not emergency_active:
        emergency_active = True
        logger.error(f"üö® Emergency Stop –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {reason}")
        await send_telegram_message(f"üö® Emergency Stop –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {reason}")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ø–ª–µ—á–æ–º
async def adjust_leverage(symbol: str, atr_value: float) -> None:
    try:
        if atr_value > HIGH_VOLATILITY_THRESHOLD:
            leverage = 2
        elif atr_value < LOW_VOLATILITY_THRESHOLD:
            leverage = 4
        else:
            leverage = 3

        await set_leverage(symbol, leverage)
        logger.info(f"‚öôÔ∏è –ü–ª–µ—á–æ –¥–ª—è {symbol} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {leverage}x")
        await send_telegram_message(f"‚öôÔ∏è –ü–ª–µ—á–æ –¥–ª—è <b>{symbol}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {leverage}x")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–ª–µ—á–∞: {e}")
