import asyncio

from api.bybit_async import fetch_balance as get_balance
from core.state import strategy_stop_event
from event_driven_heartbeat import last_known_status, send_event_heartbeat  # ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º!
from log_setup import logger
from strategies.smc_strategy import run_smc_strategy
from utils.load_tickers import load_tickers
from utils.telegram_utils import send_telegram_message

FAIL_LIMIT = 3
CHECK_INTERVAL_SECONDS = 60
sp_sleep = False  # –§–ª–∞–≥ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞

async def monitor_connection_status() -> None:
    global sp_sleep
    fail_count = 0
    alerted = False

    while True:
        await asyncio.sleep(CHECK_INTERVAL_SECONDS)
        try:
            usdt, free, used = get_balance()
            if usdt is not None:
                if alerted:
                    logger.info("‚úÖ –°–≤—è–∑—å —Å –±–∏—Ä–∂–µ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                    await send_telegram_message("‚úÖ –°–≤—è–∑—å —Å –±–∏—Ä–∂–µ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞–±–æ—Ç—É.")

                    if sp_sleep:
                        logger.info("‚ôªÔ∏è –í—ã—Ö–æ–¥ –∏–∑ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
                        await restart_strategies()
                        sp_sleep = False

                fail_count = 0
                alerted = False

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                if last_known_status["connection_ok"] is False:
                    await send_event_heartbeat("‚úÖ –°–≤—è–∑—å —Å –±–∏—Ä–∂–µ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    last_known_status["connection_ok"] = True

            else:
                fail_count += 1
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –û—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥: {fail_count}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏ —Å –±–∏—Ä–∂–µ–π: {e}")
            fail_count += 1

        if fail_count >= FAIL_LIMIT and not alerted:
            logger.error("üö® –°–≤—è–∑—å —Å –±–∏—Ä–∂–µ–π –ø–æ—Ç–µ—Ä—è–Ω–∞!")
            await send_telegram_message("üö® –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ—Ç–µ—Ä—è–Ω–∞ —Å–≤—è–∑—å —Å –±–∏—Ä–∂–µ–π! –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")
            alerted = True
            sp_sleep = True
            strategy_stop_event.set()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º event-driven heartbeat
            if last_known_status["connection_ok"] is not False:
                await send_event_heartbeat("üö® –°–≤—è–∑—å —Å –±–∏—Ä–∂–µ–π –ø–æ—Ç–µ—Ä—è–Ω–∞")
                last_known_status["connection_ok"] = False

async def restart_strategies() -> None:
    try:
        tickers = await load_tickers()

        for symbol in tickers:
            asyncio.create_task(run_smc_strategy(
                symbol=symbol,
                capital=1000,
                default_risk_pct=0.01,
            ))

        await send_telegram_message("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!")
        strategy_stop_event.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        await send_telegram_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.")
