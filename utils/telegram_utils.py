import os
import asyncio
from telegram.ext import Application
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN: str = os.getenv("TELEGRAM_TOKEN") or ""
TELEGRAM_CHAT_ID: str = os.getenv("TELEGRAM_CHAT_ID") or ""

if not TELEGRAM_TOKEN:
    raise RuntimeError("‚ùå TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
if not TELEGRAM_CHAT_ID:
    raise RuntimeError("‚ùå TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")

application = Application.builder().token(TELEGRAM_TOKEN).build()
bot = application.bot

__all__ = [
    "send_telegram_message",
    "send_telegram_photo",
    "notify_entry",
    "notify_take_profit",
    "notify_stop_loss",
    "notify_manual_close",
    "notify_pnl",
]

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç send_telegram_message –∏ –¥—Ä—É–≥–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
# –∏–º–µ–Ω–Ω–æ –æ—Ç—Å—é–¥–∞: from utils.telegram_utils import send_telegram_message, ...
# –°—Ç–∞—Ä—ã–π –º–æ–¥—É–ª—å telegram_sender –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª—ë–Ω –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.

async def send_telegram_message(message: str, parse_mode: str = "HTML"):
    try:
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message, parse_mode=parse_mode)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

async def send_telegram_photo(image_path: str, caption: str = ""): 
    try:
        with open(image_path, "rb") as photo:
            await bot.send_photo(chat_id=TELEGRAM_CHAT_ID, photo=photo, caption=caption)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤ Telegram: {e}")

async def notify_entry(symbol: str, side: str, size: float, price: float):
    text = (
        f"üöÄ <b>–í–•–û–î –í –°–î–ï–õ–ö–£</b>\n"
        f"‚Ä¢ <b>{symbol}</b> {side.upper()}\n"
        f"‚Ä¢ –û–±—ä—ë–º: <b>{size}</b>\n"
        f"‚Ä¢ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: <b>{price}</b>"
    )
    await send_telegram_message(text)

async def notify_take_profit(symbol: str, qty: float, price: float):
    text = (
        f"üéØ <b>TP</b> –ø–æ <b>{symbol}</b>\n"
        f"‚Ä¢ –û–±—ä—ë–º: <b>{qty}</b>\n"
        f"‚Ä¢ –¶–µ–Ω–∞: <b>{price}</b>"
    )
    await send_telegram_message(text)

async def notify_stop_loss(symbol: str, qty: float, price: float):
    text = (
        f"üõë <b>SL</b> –ø–æ <b>{symbol}</b>\n"
        f"‚Ä¢ –û–±—ä—ë–º: <b>{qty}</b>\n"
        f"‚Ä¢ –¶–µ–Ω–∞: <b>{price}</b>"
    )
    await send_telegram_message(text)

async def notify_manual_close(symbol: str):
    text = f"üö™ –ü–æ–∑–∏—Ü–∏—è –ø–æ <b>{symbol}</b> –∑–∞–∫—Ä—ã—Ç–∞ –≤—Ä—É—á–Ω—É—é."
    await send_telegram_message(text)

async def notify_pnl(symbol: str, pnl: float):
    emoji = "üü¢" if pnl >= 0 else "üî¥"
    text = f"{emoji} <b>–ò—Ç–æ–≥ –ø–æ {symbol}</b>: PnL = <b>{pnl:.2f} USDT</b>"
    await send_telegram_message(text)
